---
name: Full Container Image Workflow - Build, Test, Label, and Publish

on:
  schedule:
    - cron: '15 1 * * *'
  workflow_dispatch:
  push:
    branches: ["main"]
    # don't rebuild image if someone only edited unrelated files
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: ["main"]
    # don't rebuild image if someone only edited unrelated files
    paths-ignore:
      - 'README.md'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  # Use docker.io for Docker Hub || ghcr.io for Github ...
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  container_create:
    runs-on: ubuntu-latest
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      packages: write

    steps:
      - name: Check out
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Export to Docker for testing
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          load: true # Export to Docker Engine rather than pushing to a registry
          tags: ${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      ### security testing of cve's Blocking and Non-Blocking
      - name: Run Trivy for all CVEs (non-blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.run_id }}
          exit-code: 0
          ignore-unfixed: false
          format: table

      - name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.run_id }}
          exit-code: 1
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check Docker image for vulnerabilities
        # Snyk can be used to break the build when it detects vulnerabilities.
        # In this case we want to upload the issues to GitHub Code Scanning
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ github.run_id }}
          args: --file=Dockerfile

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

      # - name: Set up Clair
      #   shell: bash
      #   run: |
      #     curl -L \
      #     https://github.com/arminc/clair-scanner/releases/download/v12/clair-scanner_linux_amd64 \
      #     -o clair-scanner && \
      #     chmod +x ./clair-scanner
      #     docker run -d --name clair-db arminc/clair-db:latest
      #     docker run -p 6060:6060 --link clair-db:postgres -d --name clair arminc/clair-local-scan:latest
      # - name: Scan image with Clair
      #   shell: bash
      #   run: |
      #     ip=$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)
      #     ./clair-scanner --ip $ip ${{ github.run_id }}

      # generic test of does the container run (not sure how this plays with different entrypoints)
      - name: Unit Test - will it run ?
        run: |
          docker run --rm ${{ github.run_id }}

      - name: Extract Software Version Number for Labeling and Tagging
        run: echo "SoftwareVersion=$(docker run --rm --entrypoint=cat ${{ github.run_id }} SoftwareVersion.txt)" >> $GITHUB_ENV
        # env.SoftwareVersion

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4.1.1
        with:
          images: ${{env.IMAGE_NAME}}
          # labels: |
          #   org.opencontainers.image.title="Test Conatiner Title"
          #   org.opencontainers.image.description=Another description
          tags: |
            type=raw,value={{date 'YYYYMM'}}
            type=raw,value=latest
            type=raw,value=${{env.SoftwareVersion}}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          ### platforms to build for, defaults to linux/amd64
          ### other options: linux/amd64,linux/arm64,linux/arm/v7
          platforms: linux/amd64
          ## push the image to the registry ONLY IF it is not a pull request  (when the pull request is merged then it will push to the registry)
          push: ${{ github.event_name != 'pull_request' }}
          ## when using the buildkit layers can be cached to speed future builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
